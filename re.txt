============= NOTES =============

1. nmap command used for probing test:
	probe service: nmap -sV -T4 localhost --version-intensity 6 -p 31000-32000
	probe opening ports: nmap localhost -p 31000-32000

2. openssl command used for ssh to a host
	openssl s_client --connect localhost:30001 [--quiet]

3. uniq and sort
	sort data.txt | uniq -c [-u]

4. cron:
	- check /etc/cron.d/ for the jobs run iterately. Unlike job configs in /var/spool/cron/crontab/, the jobs definition must contain the username under which the command is executed.	
		Examples:
		@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
		* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

		#!/bin/bash
		chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
		cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
	- check "man 5 crontab" "cron" "crontab"

5. tr:
	- cat data.txt 
		Gur cnffjbeq vf 7k16JArUVv5LxVuJfsSVdbbtaHGlw9D4
	  cat data.txt | tr [a-mn-zA-MN-Z] [n-za-mN-ZA-M]
		The password is 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4

6. xxd -r target object: To convert a hex dump to the file

7. cut -d ' ' -f 1: equals to string_variable.split(' ')[0]

8. sed
	1. replace the last line of a file
		a. new_line = $(tail -n 1 file.txt)
		   sed -i -e "s/$old_line/new_line/"    *only used when the last line is unique
		b. sed -i "$cnew_line"

	2. show one specific line
		sed -n 'Np' filename

9. cron file for auto cleaning up
	*/30 * * * * root find /tmp -amin 60 -type f -delete &> /dev/null && find /tmp -amin 5 -type d -empty -delete &> /dev/null

10. git 
	1. shallow clone to avoid too many histories in .git folder: git clone SOMEREPO -depth 1
	2. git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo clone with ssh and username&password and port...

11. find
	1. find files based on permissions: find / -perm /u=s -type f 


*** Install Ghidra ***

	1. Download JDK21 from https://adoptium.net/temurin/releases/?os=any&arch=any&version=21 , extract, rename to jdk-21 and move to /opt/
	2. Use `update-alternatives` to configure java:
		1). Add java and javac by `sudo update-alternatives --install /usr/bin/java java /opt/jdk-21/bin/java 1100` and `sudo update-alternatives --install /usr/bin/javac javac /opt/jdk-21/bin/javac 1100`
		2). Run java instance by `sudo update-alternatives --config java` and check by `java --version`
		Alternatively, configure the environment variables by adding these to `~/.bashrc`:
			```
			export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64" # Or your custom path like /opt/jdk-21
			export PATH="$JAVA_HOME/bin:$PATH"
			```
		Note: `bash: /usr/bin/java: cannot execute binary file: Exec format error` means the package is for a different architecture.
	3. Download release from github and tru `./ghidraRun`

*** Use Ghidra to debug ***
	
	1. Install gdb by `sudo apt install gdb`
	2. Verify the version of Python supported by GDB running 
		```
		$ gdb
		(gdb) python import sys
		(gdb) python print(sys.version)
		(gdb) quit
		```
	   Make sure the version is at least 3.7
	3. Install osutil and protobuf Python modules by `sudo apt install python3-psutil python3-protobuf`, can check by `apt list --installed | grep 'python3-psutil`


============== Learning Materials ==============

=== Guide ===
	1. How To Start Reverse Engineering â€” A Guide https://medium.com/@arkaghosh08/how-to-start-reverse-engineering-a-guide-b50b6c8112cf
	2. RoadMap https://github.com/x86byte/RE-MA-Roadmap?tab=readme-ov-file
	3. cyber security learning path https://freedium.cfd/https://medium.com/@adarshpandey180/free-tryhackme-training-the-ultimate-beginners-guide-to-hacking-aac8e43bf81b

=== Read ===
	1. Network basics https://www.w3schools.com/cybersecurity/cybersecurity_networking.php


=== Projects === 
	1. External Game Hacks with AssaultCube https://adminions.ca/books/articles/page/part-1-from-reverse-engineering-to-cheat-development-external-game-hacks-with-assaultcube

=== Puzzles === 
	1. TryHackMe. Simples ones. https://tryhackme.com/
	2. OverTheWire (Wargames). Command lines entirely text-based. 
	3. CTF puzzles in <practical binary analysis>: https://practicalbinaryanalysis.com/

=== Tools ===
1. dirb - a web content scanner
2. BuiltWith -  identify the technologies in use
3. burp - a spidering tool
4. archives.org

